import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css';
import { useState } from 'react';
//api request
import {GraphQLClient, gql} from 'graphql-request';
import BlogCard from 'components/BlogCard';
import Select from 'react-select';


const graphcms = new GraphQLClient("https://api-us-west-2.hygraph.com/v2/cld63e58r1jec01um4zhf2rne/master");

// add what data we want to pull out
const QUERY = gql`
  {
    posts {
      id
      title
      datePublished
      slug
      content {
        html
      }
      author {
        name
        avatar {
          url
        }
      }
      coverPhoto {
        url
      }
    }
  }
`;

export async function getStaticProps() {
  const {posts} = await graphcms.request(QUERY);
  return {
    props: {
      posts,
    },
    revalidate: 10,
  }
}

export default function Home({posts}:any) {
  const [defaultOrder, setDefaultOrder] = useState(true);
  const [abcOrder, setAbcOrder] = useState(false);
  const [mostRecent, setMostRecent] = useState(false);

  const sortByAlphabetical = [].concat(posts)
    .sort((a:any, b:any) => a.title > b.title ? 1 : -1)
    .map((item:any, i) => 
        <BlogCard 
          key={i}
          title={item.title}
          author={item.author}
          datePublished={item.datePublished}
          slug={item.slug}
          coverPhoto={item.coverPhoto}
        />
    );

  const sortByDatePublished = [].concat(posts)
    .sort((a:any, b:any) => a.datePublished > b.datePublished ? 1 : -1)
    .map((item:any, i) => 
        <BlogCard 
          key={i}
          title={item.title}
          author={item.author}
          datePublished={item.datePublished}
          slug={item.slug}
          coverPhoto={item.coverPhoto}
        />
    );

  const handleSelectChange = (e:any) => {
    console.log(e.value);

    if (e.value === "Alphabetical") {
      setAbcOrder(true);
      setMostRecent(false);
      setDefaultOrder(false);
    } else if (e.value === "Most Recent") {
      setAbcOrder(false);
      setMostRecent(true);
      setDefaultOrder(false);
    } else {
      setAbcOrder(false);
      setMostRecent(false);
      setDefaultOrder(true);
    }
  }

  const selectOptions = [
    { value: 'Default', label: 'Default' },
    { value: 'Alphabetical', label: 'Alphabetical' },
    { value: 'Most Recent', label: 'Most Recent' },
  ]

  return (
    <>
      <Head>
        <title>NextJS Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Select 
          className={styles.select}
          options={selectOptions}
          onChange={handleSelectChange}
        />

        {defaultOrder && 
          <div className={styles.cardGrid}>
            {posts.map((post:any) => (
              <BlogCard 
                key={post.id}
                title={post.title}
                author={post.author}
                datePublished={post.datePublished}
                slug={post.slug}
                coverPhoto={post.coverPhoto}
              />
            ))}
          </div>
        }

        {abcOrder && 
          <div className={styles.cardGrid}>
              {sortByAlphabetical}
          </div>
        }

        {mostRecent && 
           <div className={styles.cardGrid}>
             {sortByDatePublished}
          </div>
        }
        
      </main>
    </>
  )
}
